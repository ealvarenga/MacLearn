/*
This module abstracts the implementation of a feature inducer algorithm.
It contains the functions and structures needed to create new features based on the features of a given data set.
See this as an "abstract class". A FeatInducer per se is useless, but it provides the structure needed by
functions and modules that implements different feature inducers.
*/

#ifndef __FEATINDUCER_H__
#define __FEATINDUCER_H__

#ifdef __cplusplus
extern "C" {
#endif

	#include "MacLearn/MacLearn.h"
	#include "MacLearn/DataSet/Dataset.h"
	#include <stdio.h>				/* For FILE */

	#define INDUCER_ID_LEN			12				/* Size of the inducer identifier string. Must be exatcly this size (may or may not include \0, doesn't matter) */
	
	/* FeatInducer Structures */
	typedef struct FeatInducer
	{
		/* Variables */
		PUBLIC unsigned long generatedFeatsCount;				/* Stores the number of features generated by this inducer */
		/* Functions */
		/*	Generate new features for an entry - baseIndex is the position where the first generated feature will be stored */
		PUBLIC int (*generate)(struct FeatInducer * featInducer, double * feats, unsigned long baseIndex);		/* Read above */
		/*	Create a duplicated instance - returns NULL on error */
		PUBLIC struct FeatInducer * (*clone)(struct FeatInducer * featInducer);		/* Read above */
		/* Write inducer data to the file passed */
		PUBLIC int (*writeData) (struct FeatInducer * featInducer, FILE * out);
		/* Free all pointers allocated by this instance */
		PUBLIC void (*free) (struct FeatInducer * featInducer);
	}FeatInducer;

#ifdef EXTEND_FEATINDUCER
	/************************
	* "Protected" Functions	*
	************************/

	/*	Initializes the struct's variables and function pointers. 
	NOTE: This function does NOT allocate memory for a FeatInducer struct. */
	PROTECTED void FeatInducer_Init (FeatInducer * featInducer);
#endif

	/************************
	* "Public" Functions	*
	************************/

	/*	Reads an Inducer data from an already open file stream. Returns a pointer to the new instance or NULL on error.
		NOTE: The returned instance is actually of one of the implementing "classes" (depending on file data), and not FeatInducer itself.
	*/
	PUBLIC FeatInducer * FeatInducer_ReadData (FILE * in);

#ifdef __cplusplus
}
#endif

#endif